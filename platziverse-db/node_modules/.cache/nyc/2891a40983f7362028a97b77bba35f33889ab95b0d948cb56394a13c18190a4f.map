{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","t","createSandbox","hasMany","findById","stub","withArgs","id","returns","Promise","resolve","byId","setupDatabase","afterEach","restore","truthy","Agent","serial","true","called","agent","calledOnce","calledWith","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADV,CAAf;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEN,KAAK,CAACO;AADF,CAAjB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAZ,IAAI,CAACa,UAAL,CAAgB,MAAMC,CAAN,IAAW;AACzBF,EAAAA,OAAO,GAAGV,KAAK,CAACa,aAAN,EAAV;AAEAL,EAAAA,SAAS,GAAG;AACVM,IAAAA,OAAO,EAAEJ,OAAO,CAACH,GAAR;AADC,GAAZ;AAIAC,EAAAA,SAAS,CAACO,QAAV,GAAqBL,OAAO,CAACM,IAAR,EAArB;AACAR,EAAAA,SAAS,CAACO,QAAV,CAAmBE,QAAnB,CAA4BC,EAA5B,EAAgCC,OAAhC,CAAwCC,OAAO,CAACC,OAAR,CAAgBnB,aAAa,CAACoB,IAAd,CAAmBJ,EAAnB,CAAhB,CAAxC;AAEA,QAAMK,aAAa,GAAGtB,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMO,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAR,CAAhC;AAKAI,EAAAA,EAAE,GAAG,MAAMc,aAAa,CAACpB,MAAD,CAAxB;AACD,CAhBD;AAkBAL,IAAI,CAAC0B,SAAL,CAAe,MAAM;AACnBd,EAAAA,OAAO,IAAIA,OAAO,CAACe,OAAR,EAAX;AACD,CAFD;AAIA3B,IAAI,CAAC,OAAD,EAAUc,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACc,MAAF,CAASjB,EAAE,CAACkB,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIA7B,IAAI,CAAC8B,MAAL,CAAY,OAAZ,EAAqBhB,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACiB,IAAF,CAAOrB,SAAS,CAACM,OAAV,CAAkBgB,MAAzB,EAAiC,iCAAjC;AACAlB,EAAAA,CAAC,CAACiB,IAAF,CAAOxB,UAAU,CAACC,SAAX,CAAqBwB,MAA5B,EAAoC,oCAApC;AACD,CAHD;AAMAhC,IAAI,CAAC8B,MAAL,CAAY,gBAAZ,EAA8B,MAAMhB,CAAN,IAAW;AACvC,MAAImB,KAAK,GAAG,MAAMtB,EAAE,CAACkB,KAAH,CAASZ,QAAT,CAAkBG,EAAlB,CAAlB;AAEAN,EAAAA,CAAC,CAACiB,IAAF,CAAOrB,SAAS,CAACO,QAAV,CAAmBe,MAA1B,EAAkC,oCAAlC;AACAlB,EAAAA,CAAC,CAACiB,IAAF,CAAOrB,SAAS,CAACO,QAAV,CAAmBiB,UAA1B,EAAsC,mCAAtC;AACApB,EAAAA,CAAC,CAACiB,IAAF,CAAOrB,SAAS,CAACO,QAAV,CAAmBkB,UAAnB,CAA8Bf,EAA9B,CAAP,EAA0C,2BAA1C;AAEAN,EAAAA,CAAC,CAACsB,SAAF,CAAYH,KAAZ,EAAmB7B,aAAa,CAACoB,IAAd,CAAmBJ,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CARD","sourceRoot":"/home/dipzo/DIPZO/node/avanzado/Platzi/Platziverse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nconst config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async t => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n})\n\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.true(AgentStub.findById.called, 'findById should be called on model')\n  t.true(AgentStub.findById.calledOnce, 'findById should be called on once')\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called')\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n"]}