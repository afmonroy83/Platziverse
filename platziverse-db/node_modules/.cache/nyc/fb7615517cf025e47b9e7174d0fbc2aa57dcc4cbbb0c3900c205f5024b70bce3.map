{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,GAAI,CAAE;;AADA,CAAf;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEN,KAAK,CAACO;AADF,CAAjB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAZ,IAAI,CAACa,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAGV,KAAK,CAACU,OAAN,CAAcE,MAAd,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACH,GAAR;AADC,GAAZ;AAIA,QAAMO,aAAa,GAAGb,UAAU,CAAC,KAAD,EAAO;AACrC,sBAAkB,MAAMO,SADa;AAErC,uBAAmB,MAAMH;AAFY,GAAP,CAAhC;AAKAI,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACX,MAAD,CAAxB;AACD,CAbD;AAeAL,IAAI,CAACiB,SAAL,CAAe,MAAK;AAClBL,EAAAA,OAAO,IAAIV,KAAK,CAACU,OAAN,CAAcM,OAAd,EAAX;AACD,CAFD;AAGAlB,IAAI,CAAC,OAAD,EAAUmB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAST,EAAE,CAACU,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIArB,IAAI,CAACsB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOb,SAAS,CAACK,OAAV,CAAkBS,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOhB,UAAU,CAACC,SAAX,CAAqBgB,MAA5B,EAAoC,oCAApC;AACD,CAHD","sourceRoot":"/home/dipzo/DIPZO/node/avanzado/Platzi/Platziverse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\nconst agentFixtures = require('./fixtures/agent');\n\nconst config = {\n  logging () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../',{\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(()=> {\n  sandbox && sinon.sandbox.restore()\n})\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n})\n"]}